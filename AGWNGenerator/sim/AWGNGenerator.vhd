-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\HDLAWGNGenerator\AWGNGenerator.vhd
-- Created: 2021-11-25 00:36:10
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-06
-- Target subsystem base rate: 1e-06
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: AWGNGenerator
-- Source Path: HDLAWGNGenerator/AWGNGenerator
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.AWGNGenerator_pkg.ALL;

ENTITY AWGNGenerator IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        sigma                             :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En15
        awgn                              :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En15
        );
END AWGNGenerator;


ARCHITECTURE rtl OF AWGNGenerator IS

  -- Component Declarations
  COMPONENT GaussianNoiseWithUnitVar
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          x0                              :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En11
          );
  END COMPONENT;

  COMPONENT GaussianNoiseWithReqVar
    PORT( noiseVar                        :   IN    std_logic_vector(21 DOWNTO 0);  -- ufix22_En10
          x0                              :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En11
          awgn                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En15
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : GaussianNoiseWithUnitVar
    USE ENTITY work.GaussianNoiseWithUnitVar(rtl);

  FOR ALL : GaussianNoiseWithReqVar
    USE ENTITY work.GaussianNoiseWithReqVar(rtl);

  -- Signals
  SIGNAL sigma_signed                     : signed(31 DOWNTO 0);  -- sfix32_En15
  SIGNAL Data_Type_Conversion_out1        : unsigned(21 DOWNTO 0);  -- ufix22_En10
  SIGNAL Delay1_reg                       : vector_of_unsigned22(0 TO 9);  -- ufix22 [10]
  SIGNAL Delay1_out1                      : unsigned(21 DOWNTO 0);  -- ufix22_En10
  SIGNAL x0_16_11                         : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL GaussianNoiseWithReqVar_out1     : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  u_GaussianNoiseWithUnitVar : GaussianNoiseWithUnitVar
    PORT MAP( clk => clk,
              reset => reset,
              x0 => x0_16_11  -- sfix16_En11
              );

  u_GaussianNoiseWithReqVar : GaussianNoiseWithReqVar
    PORT MAP( noiseVar => std_logic_vector(Delay1_out1),  -- ufix22_En10
              x0 => x0_16_11,  -- sfix16_En11
              awgn => GaussianNoiseWithReqVar_out1  -- sfix32_En15
              );

  sigma_signed <= signed(sigma);

  Data_Type_Conversion_out1 <= unsigned(sigma_signed(26 DOWNTO 5));

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_reg <= (OTHERS => to_unsigned(16#000000#, 22));
    ELSIF clk'EVENT AND clk = '1' THEN
      Delay1_reg(0) <= Data_Type_Conversion_out1;
      Delay1_reg(1 TO 9) <= Delay1_reg(0 TO 8);
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(9);

  awgn <= GaussianNoiseWithReqVar_out1;

END rtl;

