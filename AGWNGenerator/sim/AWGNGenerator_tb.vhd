-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\HDLAWGNGenerator\AWGNGenerator_tb.vhd
-- Created: 2021-11-25 00:37:45
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-06
-- Target subsystem base rate: 1e-06
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: AWGNGenerator_tb
-- Source Path: 
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_textio.ALL;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY STD;
USE STD.textio.ALL;
LIBRARY work;
USE work.AWGNGenerator_pkg.ALL;
USE work.AWGNGenerator_tb_pkg.ALL;

ENTITY AWGNGenerator_tb IS
END AWGNGenerator_tb;


ARCHITECTURE rtl OF AWGNGenerator_tb IS

  -- Component Declarations
  COMPONENT AWGNGenerator
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          sigma                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En15
          awgn                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En15
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : AWGNGenerator
    USE ENTITY work.AWGNGenerator(rtl);

  -- Signals
  SIGNAL clk                              : std_logic;
  SIGNAL reset                            : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL awgn_done                        : std_logic;  -- ufix1
  SIGNAL rdEnb                            : std_logic;
  SIGNAL awgn_done_enb                    : std_logic;  -- ufix1
  SIGNAL awgn_addr                        : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL awgn_active                      : std_logic;  -- ufix1
  SIGNAL check1_done                      : std_logic;  -- ufix1
  SIGNAL snkDonen                         : std_logic;
  SIGNAL resetn                           : std_logic;
  SIGNAL tb_enb                           : std_logic;
  SIGNAL ce_out                           : std_logic;
  SIGNAL awgn_enb                         : std_logic;  -- ufix1
  SIGNAL awgn_lastAddr                    : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion_out1_addr   : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL Data_Type_Conversion_out1_active : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion_out1_enb    : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion_out1_addr_delay_1 : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL rawData_sigma                    : signed(31 DOWNTO 0);  -- sfix32_En15
  SIGNAL holdData_sigma                   : signed(31 DOWNTO 0);  -- sfix32_En15
  SIGNAL sigma_offset                     : signed(31 DOWNTO 0);  -- sfix32_En15
  SIGNAL sigma                            : signed(31 DOWNTO 0);  -- sfix32_En15
  SIGNAL sigma_1                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL awgn                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL awgn_signed                      : signed(31 DOWNTO 0);  -- sfix32_En15
  SIGNAL awgn_addr_delay_1                : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL awgn_expected                    : signed(31 DOWNTO 0);  -- sfix32_En15
  SIGNAL awgn_ref                         : signed(31 DOWNTO 0);  -- sfix32_En15
  SIGNAL awgn_testFailure                 : std_logic;  -- ufix1

BEGIN
  u_AWGNGenerator : AWGNGenerator
    PORT MAP( clk => clk,
              reset => reset,
              sigma => sigma_1,  -- sfix32_En15
              awgn => awgn  -- sfix32_En15
              );

  awgn_done_enb <= awgn_done AND rdEnb;

  
  awgn_active <= '1' WHEN awgn_addr /= to_unsigned(16#1E848A#, 21) ELSE
      '0';

  enb <= rdEnb AFTER 2 ns;

  snkDonen <=  NOT check1_done;

  clk_gen: PROCESS 
  BEGIN
    clk <= '1';
    WAIT FOR 5 ns;
    clk <= '0';
    WAIT FOR 5 ns;
    IF check1_done = '1' THEN
      clk <= '1';
      WAIT FOR 5 ns;
      clk <= '0';
      WAIT FOR 5 ns;
      WAIT;
    END IF;
  END PROCESS clk_gen;

  reset_gen: PROCESS 
  BEGIN
    reset <= '1';
    WAIT FOR 20 ns;
    WAIT UNTIL clk'event AND clk = '1';
    WAIT FOR 2 ns;
    reset <= '0';
    WAIT;
  END PROCESS reset_gen;

  resetn <=  NOT reset;

  tb_enb <= resetn AND snkDonen;

  
  rdEnb <= tb_enb WHEN check1_done = '0' ELSE
      '0';

  ce_out <= enb AND (rdEnb AND tb_enb);

  awgn_enb <= ce_out AND awgn_active;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 2000010
  c_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      awgn_addr <= to_unsigned(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF awgn_enb = '1' THEN
        IF awgn_addr >= to_unsigned(16#1E848A#, 21) THEN 
          awgn_addr <= to_unsigned(16#000000#, 21);
        ELSE 
          awgn_addr <= awgn_addr + to_unsigned(16#000001#, 21);
        END IF;
      END IF;
    END IF;
  END PROCESS c_3_process;


  
  awgn_lastAddr <= '1' WHEN awgn_addr >= to_unsigned(16#1E848A#, 21) ELSE
      '0';

  awgn_done <= awgn_lastAddr AND resetn;

  -- Delay to allow last sim cycle to complete
  checkDone_1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      check1_done <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF awgn_done_enb = '1' THEN
        check1_done <= awgn_done;
      END IF;
    END IF;
  END PROCESS checkDone_1_process;

  
  Data_Type_Conversion_out1_active <= '1' WHEN Data_Type_Conversion_out1_addr /= to_unsigned(16#1E848A#, 21) ELSE
      '0';

  Data_Type_Conversion_out1_enb <= Data_Type_Conversion_out1_active AND (rdEnb AND tb_enb);

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 2000010
  DataTypeConversion_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Data_Type_Conversion_out1_addr <= to_unsigned(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF Data_Type_Conversion_out1_enb = '1' THEN
        IF Data_Type_Conversion_out1_addr >= to_unsigned(16#1E848A#, 21) THEN 
          Data_Type_Conversion_out1_addr <= to_unsigned(16#000000#, 21);
        ELSE 
          Data_Type_Conversion_out1_addr <= Data_Type_Conversion_out1_addr + to_unsigned(16#000001#, 21);
        END IF;
      END IF;
    END IF;
  END PROCESS DataTypeConversion_process;


  Data_Type_Conversion_out1_addr_delay_1 <= Data_Type_Conversion_out1_addr AFTER 1 ns;

  -- Data source for sigma
  sigma_fileread: PROCESS (Data_Type_Conversion_out1_addr_delay_1, tb_enb, rdEnb)
    FILE fp: TEXT open READ_MODE is "sigma.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic_vector(31 DOWNTO 0);

  BEGIN
    IF tb_enb /= '1' THEN
    ELSIF rdEnb = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      HREAD(l, read_data);
    END IF;
    rawData_sigma <= signed(read_data(31 DOWNTO 0));
  END PROCESS sigma_fileread;

  -- holdData reg for Data_Type_Conversion_out1
  stimuli_Data_Type_Conversion_out1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_sigma <= (OTHERS => 'X');
    ELSIF clk'event AND clk = '1' THEN
      holdData_sigma <= rawData_sigma;
    END IF;
  END PROCESS stimuli_Data_Type_Conversion_out1_process;

  stimuli_Data_Type_Conversion_out1_1: PROCESS (rawData_sigma, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      sigma_offset <= holdData_sigma;
    ELSE
      sigma_offset <= rawData_sigma;
    END IF;
  END PROCESS stimuli_Data_Type_Conversion_out1_1;

  sigma <= sigma_offset AFTER 2 ns;

  sigma_1 <= std_logic_vector(sigma);

  awgn_signed <= signed(awgn);

  awgn_addr_delay_1 <= awgn_addr AFTER 1 ns;

  -- Data source for awgn_expected
  awgn_expected_fileread: PROCESS (awgn_addr_delay_1, tb_enb, rdEnb)
    FILE fp: TEXT open READ_MODE is "awgn_expected.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic_vector(31 DOWNTO 0);

  BEGIN
    IF tb_enb /= '1' THEN
    ELSIF rdEnb = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      HREAD(l, read_data);
    END IF;
    awgn_expected <= signed(read_data(31 DOWNTO 0));
  END PROCESS awgn_expected_fileread;

  awgn_ref <= awgn_expected;

  awgn_signed_checker: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      awgn_testFailure <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF ce_out = '1' AND awgn_signed /= awgn_ref THEN
        awgn_testFailure <= '1';
        ASSERT FALSE
          REPORT "Error in awgn_signed: Expected " & to_hex(awgn_ref) & (" Actual " & to_hex(awgn_signed))
          SEVERITY ERROR;
      END IF;
    END IF;
  END PROCESS awgn_signed_checker;

  completed_msg: PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF check1_done = '1' THEN
        IF awgn_testFailure = '0' THEN
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (PASSED)**************"
            SEVERITY NOTE;
        ELSE
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (FAILED)**************"
            SEVERITY NOTE;
        END IF;
      END IF;
    END IF;
  END PROCESS completed_msg;

END rtl;

