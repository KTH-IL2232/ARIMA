-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\HDLAWGNGenerator\GaussianNoiseWithUnitVar.vhd
-- Created: 2021-11-25 00:36:10
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: GaussianNoiseWithUnitVar
-- Source Path: HDLAWGNGenerator/AWGNGenerator/GaussianNoiseWithUnitVar
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.AWGNGenerator_pkg.ALL;

ENTITY GaussianNoiseWithUnitVar IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        x0                                :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En11
        );
END GaussianNoiseWithUnitVar;


ARCHITECTURE rtl OF GaussianNoiseWithUnitVar IS

  -- Component Declarations
  COMPONENT TausUniformRandGen
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          u0_16_16                        :   OUT   std_logic_vector(47 DOWNTO 0);  -- ufix48_En48
          u1_16_16                        :   OUT   std_logic_vector(15 DOWNTO 0)  -- ufix16_En16
          );
  END COMPONENT;

  COMPONENT logImplementation
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          u0_48_48                        :   IN    std_logic_vector(47 DOWNTO 0);  -- ufix48_En48
          e                               :   OUT   std_logic_vector(30 DOWNTO 0)  -- ufix31_En24
          );
  END COMPONENT;

  COMPONENT SqrtImplementation
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          u                               :   IN    std_logic_vector(30 DOWNTO 0);  -- ufix31_En24
          f                               :   OUT   std_logic_vector(16 DOWNTO 0)  -- ufix17_En13
          );
  END COMPONENT;

  COMPONENT SinCos
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          u1                              :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En16
          g0                              :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En15
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : TausUniformRandGen
    USE ENTITY work.TausUniformRandGen(rtl);

  FOR ALL : logImplementation
    USE ENTITY work.logImplementation(rtl);

  FOR ALL : SqrtImplementation
    USE ENTITY work.SqrtImplementation(rtl);

  FOR ALL : SinCos
    USE ENTITY work.SinCos(rtl);

  -- Signals
  SIGNAL u0_48_48                         : std_logic_vector(47 DOWNTO 0);  -- ufix48
  SIGNAL u0_16_16                         : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL u0_48_48_unsigned                : unsigned(47 DOWNTO 0);  -- ufix48_En48
  SIGNAL Delay_out1                       : unsigned(47 DOWNTO 0);  -- ufix48_En48
  SIGNAL logImplementation_out1           : std_logic_vector(30 DOWNTO 0);  -- ufix31
  SIGNAL logImplementation_out1_unsigned  : unsigned(30 DOWNTO 0);  -- ufix31_En24
  SIGNAL Delay1_reg                       : vector_of_unsigned31(0 TO 4);  -- ufix31 [5]
  SIGNAL Delay1_out1                      : unsigned(30 DOWNTO 0);  -- ufix31_En24
  SIGNAL SqrtImplementation_out1          : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL SqrtImplementation_out1_unsigned : unsigned(16 DOWNTO 0);  -- ufix17_En13
  SIGNAL u0_16_16_unsigned                : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL Delay2_out1                      : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL SinCos_out1                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL SinCos_out1_signed               : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay31_reg                      : vector_of_signed16(0 TO 5);  -- sfix16 [6]
  SIGNAL Delay31_out1                     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay23_reg                      : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL Delay23_out1                     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Product_cast                     : signed(17 DOWNTO 0);  -- sfix18_En13
  SIGNAL Product_mul_temp                 : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL x0_16_11                         : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL x0_16_11_1                       : signed(15 DOWNTO 0);  -- sfix16_En11

BEGIN
  u_TausUniformRandGen : TausUniformRandGen
    PORT MAP( clk => clk,
              reset => reset,
              u0_16_16 => u0_48_48,  -- ufix48_En48
              u1_16_16 => u0_16_16  -- ufix16_En16
              );

  u_logImplementation : logImplementation
    PORT MAP( clk => clk,
              reset => reset,
              u0_48_48 => std_logic_vector(Delay_out1),  -- ufix48_En48
              e => logImplementation_out1  -- ufix31_En24
              );

  u_SqrtImplementation : SqrtImplementation
    PORT MAP( clk => clk,
              reset => reset,
              u => std_logic_vector(Delay1_out1),  -- ufix31_En24
              f => SqrtImplementation_out1  -- ufix17_En13
              );

  u_SinCos : SinCos
    PORT MAP( clk => clk,
              reset => reset,
              u1 => std_logic_vector(Delay2_out1),  -- ufix16_En16
              g0 => SinCos_out1  -- sfix16_En15
              );

  u0_48_48_unsigned <= unsigned(u0_48_48);

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= to_unsigned(0, 48);
    ELSIF clk'EVENT AND clk = '1' THEN
      Delay_out1 <= u0_48_48_unsigned;
    END IF;
  END PROCESS Delay_process;


  logImplementation_out1_unsigned <= unsigned(logImplementation_out1);

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_reg <= (OTHERS => to_unsigned(16#00000000#, 31));
    ELSIF clk'EVENT AND clk = '1' THEN
      Delay1_reg(0) <= logImplementation_out1_unsigned;
      Delay1_reg(1 TO 4) <= Delay1_reg(0 TO 3);
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(4);

  SqrtImplementation_out1_unsigned <= unsigned(SqrtImplementation_out1);

  u0_16_16_unsigned <= unsigned(u0_16_16);

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      Delay2_out1 <= u0_16_16_unsigned;
    END IF;
  END PROCESS Delay2_process;


  SinCos_out1_signed <= signed(SinCos_out1);

  Delay31_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay31_reg <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      Delay31_reg(0) <= SinCos_out1_signed;
      Delay31_reg(1 TO 5) <= Delay31_reg(0 TO 4);
    END IF;
  END PROCESS Delay31_process;

  Delay31_out1 <= Delay31_reg(5);

  Delay23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay23_reg <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      Delay23_reg(0) <= Delay31_out1;
      Delay23_reg(1) <= Delay23_reg(0);
    END IF;
  END PROCESS Delay23_process;

  Delay23_out1 <= Delay23_reg(1);

  Product_cast <= signed(resize(SqrtImplementation_out1_unsigned, 18));
  Product_mul_temp <= Product_cast * Delay23_out1;
  x0_16_11 <= Product_mul_temp(32 DOWNTO 0);

  x0_16_11_1 <= x0_16_11(32 DOWNTO 17);

  x0 <= std_logic_vector(x0_16_11_1);

END rtl;

